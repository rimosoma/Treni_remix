1. Struttura del Contratto
Il contratto eredita le seguenti librerie di OpenZeppelin:

    - ERC721: Standard per i token non fungibili (NFT).
    - Counters: Permette di gestire in modo sicuro l’assegnazione degli ID ai treni.
    - AccessControl: Introduce un sistema di ruoli per limitare l’accesso a determinate funzioni (ad esempio, solo un manutentore può aggiornare lo stato di un treno).

Il contratto definisce due ruoli principali:

    - DEFAULT_ADMIN_ROLE: Amministratore con pieno controllo.
    - MAINTAINER_ROLE: Ruolo per chi può aggiornare lo stato dei treni e aggiungere documenti IPFS.

2. Strutture Dati
Il contratto utilizza due strutture principali per modellare i treni e i loro vagoni:

2.1 Struttura Wagon (Vagone)
    - Ogni vagone ha:
        - wagonId: Un identificatore univoco (come un numero di telaio).
        - status: Lo stato operativo del vagone (es. "Operativo", "InManutenzione").

2.2 Struttura TrainData (Treno)
    - Ogni treno è rappresentato da:
        - trainId: ID univoco assegnato al treno.
        - wagons: Una lista di strutture Wagon, che rappresenta i vagoni del treno.
        - status: Lo stato operativo generale del treno.
        - documentHashes: Una lista di hash IPFS per i documenti associati.

3. Funzionalità 
3.1 Creazione di un NFT Treno (mintTrain)   Solo l’amministratore può chiamare questa funzione.
    - Si incrementa il contatore degli ID per assegnare un ID univoco al treno.
    - Si crea l’NFT per l’indirizzo proprietario.
    - Si inizializza la struttura TrainData, assegnando lo stato "Operativo" e copiando la lista dei vagoni ricevuti.
    - Viene emesso l’evento TrainMinted.

3.2 Aggiornamento dello stato di un treno (updateTrainStatus)   Solo un manutentore può chiamare questa funzione.
    - Verifica che il treno esista.
    - Aggiorna lo stato del treno (es. "InManutenzione", "Fuori Servizio").
    - Emissione dell’evento StatusUpdated.

3.3 Aggiornamento dello stato di un vagone (updateWagonStatus)
    - Controlla che il treno esista.
    - Cerca il vagone nella lista.
    - Se lo trova, ne aggiorna lo stato e genera l’evento WagonStatusUpdated.
    - Se il vagone non esiste, restituisce un errore.

3.4 Aggiunta di un documento IPFS (linkDocument)    Solo un manutentore può chiamare questa funzione.
    - Verifica che il treno esista.
    - Aggiunge l’hash del documento IPFS all’array documentHashes.
    - Genera l’evento DocumentLinked.
    - Questo permette di tracciare manutenzioni, guasti e aggiornamenti con un metodo efficiente e scalabile, senza salvare direttamente i file sulla blockchain.

3.5 Lettura dei dati di un treno (getTrainData) Chiunque può chiamare questa funzione per ottenere i dati di un treno, inclusi:

L'ID del treno.
I vagoni e i loro stati.
Lo stato operativo del treno.
Gli hash dei documenti IPFS collegati.
4. Sicurezza ed Efficienza
    - Uso degli NFT: Un ID unico per ogni treno, garantendo autenticità e proprietà verificabili sulla blockchain.
    - Uso degli hash IPFS: Minimizza i costi di archiviazione sulla blockchain, registrando solo riferimenti immutabili ai documenti off-chain.
    - Ruoli di accesso: Solo utenti con permessi specifici possono modificare lo stato dei treni e aggiungere documenti.



Questo contratto fornisce una soluzione trasparente e scalabile per la gestione dei treni, 
con un tracciamento sicuro degli aggiornamenti di stato e della documentazione, 
bilanciando sicurezza, costi e praticità. 